
Course notes:

Git commands:
=============

$ git clone <URL>
Clone the project to a folder with the project name.
Need to open another Git Bash inside the new folder.

$ git add .
Stage all the changes

$ git commit -m "added new feature"
Commit changes locally.

$ git push
Push work to GitHub.

EditorConfig:
==============
Allows sharing the configuration of the code editor.

Steps:
Add file .editorconfig in the root of the project.
Installed plug-in EditorConfig for Visual Studio Code.


SecurityScanning for npm packages:
==================================
Using "Node Security Platform".
A convenient time to check is at npm start.
It slows the start and requires a network connection to perform the check but has the advantage of quickly notification.

- Install nsp globally:
npm install -g nsp
- Run the check:
nsp check


Development Web Server:
=======================
Using express. Configured in srcServer.js.


Sharing work with other people:
===============================
Options to deploy a demo version to a server.
localtunnel(using it)
ngrok
now
surge

- Install localtunnel:
npm install -g localtunnel
- Start localtunnel:
lt --port 3000
- Start localtunnel with a sub-domain:
lt --port 3000 valcarcel


Automation:
===========
Using npm script.
npm start
npm test
npm run <scriptname>
npm run <scriptname> -s


Transpiling:
============
Using Babel.

Configurations:
.babelrc: Not npm specific, easier to read since isolated.
package.json: one less file in your project.


Bundling:
=========
Using Webpack.

There are 5 Module Formats:

1. Immediately invoked function expression (IIFE)
2. Asynchronous Model Definition (AMD)
3. CommonJS (CJS)
4. Universal Module Definition (UMD)
5.ES6 Modules.

myGlobal:       -> myGlobal

(function() {   -> IIFE
  // my code
})();

define(['jq'], function(jq){});   -> AMD

These above were the past.

var jquery = require('jquery')    -> CommonJS

import jQuery from 'jquery'       -> ES6 Modules

WebPack:
Much more than just JS
- CSS
- Image
- Fonts
- HTML

Bundle splitting
Hot module reloading
Webpack 2 offers tree shaking (soon)

webpack.config.dev.js
Configuration for development. It simulates that files are om src folder but in this case it serves files from memory.

Sourcemaps:
Downloaded only if you open the developers tools.
Configured in webpack.config.dev.js->devtool.
We are using inline-source-map but there are more configurations to try.

Debugging:
Add debugger; and will see the original ES6 code in the browser.


Linting:
========
Using ESLint. The most popular today.
To support Typescript (at the time of recording the course) use TSLint.

Decisions for setting up ESLint:
1. Configuration: package.json.
2. Rules to enable.
3. What rules produce warnings and errors.
4. Which plugins: we ues eslint-plugin-node for node. Enforce consistent style for a framework.
5. Use a preset: A set of decisions already decided by someone else. Recommended to start.

Issue:
*** ESLint doesn't watch files.
We are using the nmp package eslint-watch adds file watch.
eslint-watch help linting test and build scripts too.

*** ESLint doesn't support many experimental JavaScript features.
At this point we are using only standardized JavaScript features.
If support for experimental JavaScript features is needed use babel-eslint.

Setting ESLint in the build process is recommended:
1. All feedback in one place.
2. Universal configuration.
3. Part of continuous integration.



